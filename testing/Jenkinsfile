def e2e_in_commit
pipeline{
    agent any
    
    options{
    // set time stamps on the log
    timestamps()
    
    // set gitlab connection where to sent an update
    gitLabConnection('my repo')
    }
    
    tools {
        maven "maven 3.6.2"
        jdk "java 8 kit"
    }
    stages{
        stage("checkout"){
            when{
                anyOf {
                    branch "main"
                }
            }
            steps{
                
                echo "========checking out (loking hella fine)========"
                deleteDir()
                checkout scm
                sh "mvn clean"
                sh "git checkout ${GIT_BRANCH}"
            }
        }
        stage("build"){
            when{
                anyOf {
                    branch "main"
                }
            }
            steps{
                echo "========executing build========"
                
                withMaven {
                    configFileProvider([configFile(fileId: '0a5edd42-4379-4509-a49e-d8ba1384edeb', variable: 'set')]) {
                        sh "mvn -s ${set} package"
                    } 
                } // withMaven will discover the generated Maven artifacts, JUnit Surefire & FailSafe reports and FindBugs reports
                
            }
            post{
                success{
                    echo "========build executed successfully========"
                }
                failure{
                    echo "========build execution failed========"
                }
            }
        }
        stage("e2e tests"){
            when{
                anyOf {
                    branch "main"
                }
            }
            steps{
                echo "========executing tests========"
                script{
                     withCredentials( [usernamePassword( credentialsId: 'artyfactory', 
                                      usernameVariable: 'USERNAME', 
                                      passwordVariable: 'PASSWORD')]) {
                       sh """
                       wget http://172.31.39.103:8082/artifactory/libs-snapshot-local/com/lidar/telemetry/99-SNAPSHOT/telemetry-99-20230110.093637-9.jar --user=${USERNAME} --password=${PASSWORD}
                       wget http://172.31.39.103:8082/artifactory/libs-snapshot-local/com/lidar/analytics/99-SNAPSHOT/analytics-99-20230110.113625-6.jar  --user=${USERNAME} --password=${PASSWORD}
                       thisjar=\$(ls target | grep jar)
                       java -cp target/\$thisjar:\$(ls | grep jar | head -n 1):\$(ls | grep jar | tail -n 1) com.lidar.simulation.Simulator
                       """
                    }
                }
            }
            post{
                always{
                    echo "========tests are done========"
                }
                success{
                    echo "========tests executed successfully========"
                }
                failure{
                    echo "========tests execution failed========"
                }
            }
        }
        stage("publish "){
            when{
                anyOf {
                    branch "main"
                }
            }
            steps{
                echo "========executing publishing to artifactory========"
                withMaven {
                    configFileProvider([configFile(fileId: '0a5edd42-4379-4509-a49e-d8ba1384edeb', variable: 'set')]) {
                        sh "mvn -s ${set} deploy -DskipTests"
                    } 
                } 
            }
            post{
                success{
                    echo "========publish executed successfully========"
                }
                failure{
                    echo "========publish execution failed========"
                }
            }
        }
    }
    post{
        always{
            echo "========pipline done========"
        }
         success{
            echo "========pipeline executed successfully ========"
            
            // updating the git status to the git reposetory 
            updateGitlabCommitStatus name: "all good", state: "success" 
        }
        failure{
            echo "========pipeline execution failed========"
            
            // updating the git status to the git reposetory 
            updateGitlabCommitStatus name: "error", state: "failed" 
        }
    }
}

