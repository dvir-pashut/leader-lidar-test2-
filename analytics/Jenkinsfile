def e2e_in_commit
pipeline{
    agent any
    
    options{
    // set time stamps on the log
    timestamps()
    
    // set gitlab connection where to sent an update
    gitLabConnection('my repo')
    }
    
    tools {
        maven "maven 3.6.2"
        jdk "java 8 kit"
    }

    stages{
        stage("checkout"){
            steps{
                echo "========checking out (loking hella fine)========"
                deleteDir()
                checkout scm
                sh "mvn clean"
                sh "git checkout ${GIT_BRANCH}"
                script {
                    e2e_in_commit = sh (
                        script: 'git log -1 --pretty=%B | grep  "#e2e"|| { echo "" ; }',
                        returnStdout: true
                    ).trim() 
                }
                echo "${e2e_in_commit}"
            }
        }
        stage("Calculate and set 3-number version"){
            when{
                anyOf {
                    branch "realeas/*"
                }
            }
            steps{
                echo "========Calculate and set 3-number version========"
                script{
                    sh """
                    
                    NEXTVERSION=\$(git describe --tags | cut -d '-' -f1 | awk -F. -v OFS=. '{\$NF += 1 ; print}')
                    
                    if [ \$NEXTVERSION ] 
                    then
                        NEXTVERSION=\$(git describe --tags | cut -d '-' -f1 | awk -F. -v OFS=. '{\$NF += 1 ; print}')
                        echo "\${NEXTVERSION}" > v.txt
                    else
                        NEXTVERSION="\$(git branch | grep '*'| cut -d '/' -f2).1"
                        echo "\$(git branch | grep '*'| cut -d '/' -f2).1" > v.txt
                    fi
                    
                    nextnomatch=\$(echo \$NEXTVERSION | cut -d "." -f1,2)

                    if [ \$nextnomatch != "\$(git branch | grep '*'| cut -d '/' -f2)" ]
                    then
                    NEXTVERSION="\$(git branch | grep '*'| cut -d '/' -f2).1"
                    echo "\$(git branch | grep '*'| cut -d '/' -f2).1" > v.txt
                    fi

                    mvn versions:set -DnewVersion=\$NEXTVERSION
                    """            
                }
            }
            post{
                always{
                    echo "========Calculate and set 3-number version finished========"

                }
                success{
                    echo "========Calculate and set 3-number version executed successfully========"
                }
                failure{
                    echo "========Calculate and set 3-number version execution failed========"
                }
            }
        }
        stage("build"){
            when{
                anyOf {
                    branch "realeas/*"
                    branch "feature/*"
                    branch "main"
                }
            }
            steps{
                echo "========executing build========"
                
                withMaven {
                    configFileProvider([configFile(fileId: '0a5edd42-4379-4509-a49e-d8ba1384edeb', variable: 'set')]) {
                        sh "mvn -s ${set} package"
                    } 
                } // withMaven will discover the generated Maven artifacts, JUnit Surefire & FailSafe reports and FindBugs reports
                
            }
            post{
                success{
                    echo "========build executed successfully========"
                }
                failure{
                    echo "========build execution failed========"
                }
            }
        }
        stage("e2e tests"){
            when{
                anyOf {
                    allOf {
                        branch 'feature/*'
                        expression { "${e2e_in_commit}" != "" }
                    }
                    branch "main"
                    branch "realeas/*"
                }
            }
            steps{
                echo "========executing tests========"
                script{
                     withCredentials( [usernamePassword( credentialsId: 'artyfactory', 
                                      usernameVariable: 'USERNAME', 
                                      passwordVariable: 'PASSWORD')]) {
                    
                    
                       sh """
                        if [ "${GIT_BRANCH}" = realeas/\$(git branch | grep '*'| cut -d '/' -f2) ] 
                        then
                            lastT=\$(curl -u ${USERNAME}:${PASSWORD} "http://172.31.39.103:8082/artifactory/libs-release-local/com/lidar/telemetry/" | grep ">\$(git branch | grep '*'| cut -d '/' -f2)" | tail -n 1 | cut -d '\"' -f 2 | cut -d '/' -f 1 )      
                            wget http://172.31.39.103:8082/artifactory/libs-release-local/com/lidar/telemetry/\${lastT}/telemetry-\${lastT}.jar --user=${USERNAME} --password=${PASSWORD}
                        else
                            wget http://172.31.39.103:8082/artifactory/libs-snapshot-local/com/lidar/telemetry/99-SNAPSHOT/telemetry-99-20230111.073536-12.jar --user=${USERNAME} --password=${PASSWORD}
                        fi
                        
                        wget http://172.31.39.103:8082/artifactory/libs-snapshot-local/com/lidar/simulator/99-SNAPSHOT/simulator-99-20230110.103625-1.jar --user=${USERNAME} --password=${PASSWORD}
                        thisjar=\$(ls target | grep jar)
                        echo "\$thisjar"
                        java -cp target/\$thisjar:\$(ls | grep jar | head -n 1):\$(ls | grep jar | tail -n 1) com.lidar.simulation.Simulator
                        """
                    }
                }
            }
            post{
                always{
                    echo "========tests are done========"
                }
                success{
                    echo "========tests executed successfully========"
                }
                failure{
                    echo "========tests execution failed========"
                }
            }
        }
        stage("publish "){
            when{
                anyOf {
                    branch "realeas/*"
                    branch "main"
                }
            }
            steps{
                echo "========executing publishing to artifactory========"
                withMaven {
                    configFileProvider([configFile(fileId: '0a5edd42-4379-4509-a49e-d8ba1384edeb', variable: 'set')]) {
                        sh "mvn -s ${set} deploy -DskipTests"
                    } 
                } 
            }
            post{
                success{
                    echo "========publish executed successfully========"
                }
                failure{
                    echo "========publish execution failed========"
                }
            }
        }
         stage("push tag"){
            when {
                branch "realeas/*"
            }
            steps{
                echo "========executing pushing tag========"
                script{
                    sh "git tag \$(cat v.txt)"
                    //sh "git remote set-url origin git@gitlab:gitlab-instance-24b2f4ed/suggest-lib.git"
                    sh "git push origin \$(cat v.txt)"
                }
            }
            post{
                success{
                    echo "========tags push executed successfully========"
                }
                failure{
                    echo "========tags push execution failed========"
                }
            }
        }
    }
    post{
        always{
            echo "========pipline done========"
        }
         success{
            echo "========pipeline executed successfully ========"
            
            // updating the git status to the git reposetory 
            updateGitlabCommitStatus name: "all good", state: "success" 
        }
        failure{
            echo "========pipeline execution failed========"
            
            // updating the git status to the git reposetory 
            updateGitlabCommitStatus name: "error", state: "failed" 
        }
    }
}

